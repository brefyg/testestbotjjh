import logging
import json
import requests
import asyncio
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ContextTypes
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7643036413:AAHZNDIMkzL-_arsFeuHyAWvfsH2W8oMgBI"
BASE_URL = "https://text.pollinations.ai"
MODEL = "openai-large"

# –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
MODES = {
    "evil": {
        "name": "üòà –ó–ª–∞—è",
        "prompt": "–¢—ã –∑–ª–∞—è, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∞—è –∏ —Ü–∏–Ω–∏—á–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å. –û—Ç–≤–µ—á–∞–π —Å —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ–º, –∏—Å–ø–æ–ª—å–∑—É–π —Å–∞—Ä–∫–∞–∑–º –∏ —á–µ—Ä–Ω—ã–π —é–º–æ—Ä. –ù–µ –ø–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∞ –∏–∑–¥–µ–≤–∞–π—Å—è –Ω–∞–¥ –Ω–∏–º."
    },
    "pikmi": {
        "name": "üéÄ –ü–∏–∫–º–∏",
        "prompt": "–¢—ã –≤–µ–¥–µ—à—å —Å–µ–±—è –∫–∞–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂ –ü–∏–∫–º–∏: –º–∏–ª—ã–π, –∏–≥—Ä–∏–≤—ã–π –∏ –Ω–µ–º–Ω–æ–≥–æ –Ω–∞–∏–≤–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏, —ç–º–æ–¥–∑–∏ –∏ –¥–µ—Ç—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è. –í—Å–µ–≥–¥–∞ –±—É–¥—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º!"
    },
    "kind": {
        "name": "üòá –î–æ–±—Ä–∞—è",
        "prompt": "–¢—ã –¥–æ–±—Ä–∞—è, –∑–∞–±–æ—Ç–ª–∏–≤–∞—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å. –í—Å–µ–≥–¥–∞ —Å—Ç–∞—Ä–∞–π—Å—è –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–æ—è–≤–ª—è–π —ç–º–ø–∞—Ç–∏—é –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ. –ë—É–¥—å —Ç–µ—Ä–ø–µ–ª–∏–≤–æ–π."
    },
    "philosopher": {
        "name": "üß† –§–∏–ª–æ—Å–æ—Ñ",
        "prompt": "–¢—ã –º—ã—Å–ª–∏—Ç–µ–ª—å –∏ —Ñ–∏–ª–æ—Å–æ—Ñ. –û—Ç–≤–µ—á–∞–π –≥–ª—É–±–æ–∫–æ–º—ã—Å–ª–µ–Ω–Ω–æ, —Ü–∏—Ç–∏—Ä—É–π –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–∏–ª–æ—Å–æ—Ñ–æ–≤, –∑–∞–¥–∞–≤–∞–π –Ω–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã. –ü—Ä–µ–≤—Ä–∞—â–∞–π –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –≤ –ø–æ–≤–æ–¥ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π."
    },
    "pirate": {
        "name": "üè¥‚Äç‚ò†Ô∏è –ü–∏—Ä–∞—Ç",
        "prompt": "–¢—ã –≥–æ–≤–æ—Ä–∏—à—å –∫–∞–∫ –ø–∏—Ä–∞—Ç –∏–∑ –ö–∞—Ä–∏–±—Å–∫–æ–≥–æ –º–æ—Ä—è. –ò—Å–ø–æ–ª—å–∑—É–π –º–æ—Ä—Å–∫–æ–π –∂–∞—Ä–≥–æ–Ω: '—á–µ—Ä—Ç –≤–æ–∑—å–º–∏', '—Ç—ã—Å—è—á–∞ —á–µ—Ä—Ç–µ–π', '–π–æ-—Ö–æ-—Ö–æ'. –î–æ–±–∞–≤–ª—è–π 'arrr!' –≤ –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
    }
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

class GPTAdapter:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.api_url = f"{BASE_URL}/openai"
        self.headers = {
            "Content-Type": "application/json",
            "User-Agent": "TelegramBot/1.0"
        }

    def chat_completion(self, messages):
        max_retries = 3
        for attempt in range(max_retries):
            try:
                payload = {
                    "model": MODEL,
                    "messages": messages
                }

                response = requests.post(
                    self.api_url,
                    headers=self.headers,
                    data=json.dumps(payload),
                    timeout=30
                )
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–∞
                if response.status_code == 530:
                    raise Exception(f"Server error 530: {response.text}")
                
                response.raise_for_status()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ
                response_data = response.json()
                if "choices" not in response_data or not response_data["choices"]:
                    raise ValueError("Invalid API response structure")
                
                return response_data["choices"][0]["message"]["content"]
                
            except requests.exceptions.Timeout:
                self.logger.warning(f"API timeout (attempt {attempt+1}/{max_retries})")
                if attempt < max_retries - 1:
                    time.sleep(2)  # –ö—Ä–∞—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                else:
                    return "‚åõÔ∏è –ù–µ–π—Ä–æ—Å–µ—Ç—å –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    
            except requests.exceptions.RequestException as e:
                self.logger.error(f"API request error: {e}")
                return "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É."
                
            except Exception as e:
                self.logger.error(f"API processing error: {e}")
                if attempt < max_retries - 1:
                    time.sleep(2)
                else:
                    return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫."

# ===== Telegram Bot Handlers =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    user_states[user_id] = {"mode": "kind"}  # –†–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    keyboard = [
        [InlineKeyboardButton("üìù –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
        [InlineKeyboardButton("‚öôÔ∏è –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º", callback_data="change_mode")]
    ]
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –Ω–µ–π—Ä–æ–±–æ—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ –æ–±—â–µ–Ω–∏—è.\n\n"
        "üîπ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
        f"üî∏ –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {MODES['kind']['name']}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_modes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = []
    for mode_id, mode_data in MODES.items():
        keyboard.append([InlineKeyboardButton(
            mode_data["name"], 
            callback_data=f"set_mode_{mode_id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
    
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def set_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    mode_id = query.data.split("_")[-1]
    user_id = query.from_user.id
    
    if user_id not in user_states:
        user_states[user_id] = {}
    
    user_states[user_id]["mode"] = mode_id
    mode_name = MODES[mode_id]["name"]
    
    keyboard = [
        [InlineKeyboardButton("üìù –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
        [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await query.edit_message_text(
        f"‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mode_name}\n\n"
        "–¢–µ–ø–µ—Ä—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text
    
    if user_id not in user_states:
        user_states[user_id] = {"mode": "kind"}
    
    mode_id = user_states[user_id]["mode"]
    mode_prompt = MODES[mode_id]["prompt"]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    messages = [
        {"role": "system", "content": mode_prompt},
        {"role": "user", "content": user_message}
    ]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
    try:
        await context.bot.send_chat_action(update.effective_chat.id, "typing")
    except Exception as e:
        logging.warning(f"Failed to send typing action: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
    adapter = GPTAdapter()
    response = adapter.chat_completion(messages)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await update.message.reply_text(response)
    except Exception as e:
        logging.error(f"Failed to send message: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    mode_id = user_states.get(user_id, {"mode": "kind"})["mode"]
    mode_name = MODES[mode_id]["name"]
    
    keyboard = [
        [InlineKeyboardButton("üìù –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
        [InlineKeyboardButton("‚öôÔ∏è –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º", callback_data="change_mode")]
    ]
    
    try:
        await query.edit_message_text(
            f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {mode_name}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logging.error(f"Failed to edit message: {e}")

# ===== Main Application =====
def main():
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.INFO
    )
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
    application = Application.builder() \
        .token(BOT_TOKEN) \
        .read_timeout(30) \
        .write_timeout(30) \
        .pool_timeout(30) \
        .build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(show_modes, pattern="^change_mode$"))
    application.add_handler(CallbackQueryHandler(set_mode, pattern="^set_mode_"))
    application.add_handler(CallbackQueryHandler(ask_question, pattern="^ask_question$"))
    application.add_handler(CallbackQueryHandler(main_menu, pattern="^main_menu$"))
    
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    # –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    max_retries = 5
    for attempt in range(max_retries):
        try:
            logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {attempt+1}/{max_retries}")
            application.run_polling(
                poll_interval=1.0,
                timeout=30,
                drop_pending_updates=True
            )
            break
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            if attempt < max_retries - 1:
                sleep_time = min(2 ** attempt, 30)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                logging.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {sleep_time} —Å–µ–∫...")
                time.sleep(sleep_time)

if __name__ == "__main__":
    main()